trigger:
  batch: true
  branches:
    include:
      - master

parameters:
  - name: buildType
    displayName: Build type used during smoke tests.
    default: RelWithDebInfo
    type: string
    values:
      - Debug
      - Release
      - RelWithDebInfo

variables:
  - name: Build.CMakeBinariesDirectory
    readonly: true
    value: $(Build.BinariesDirectory)/build
  - name: Build.CCacheDirectory
    readonly: true
    value: $(Build.BinariesDirectory)/ccache
  - name: Conan.SystemRequiresMode
    readonly: true
    value: enabled
  - name: Conan.UserHome
    readonly: true
    value: $(Build.BinariesDirectory)/conan-cache
  - name: Conan.UserHomeShort
    readonly: true
    value: $(Build.BinariesDirectory)/conan-cache/short

jobs:
  - job:

    pool:
      vmImage: ubuntu-20.04

    workspace:
      clean: outputs

    steps:
      - checkout: self
        clean: true
        displayName: Get the software
        fetchDepth: 1

      - bash: |
          sudo apt-get install ccache -y
          echo "##vso[task.prependpath]/usr/lib/ccache"
        displayName: Install ccache and update PATH to use linked versions of gcc, cc, etc

      - bash: echo "##vso[task.setvariable variable=pip.CacheDirectory;]$HOME/.cache/pip"
        displayName: Set pip cache directory

      - task: Cache@2
        displayName: Ccache
        inputs:
          key: '"Ccache" | "$(Agent.OS)" | "${{ parameters.buildType }}" | "$(Build.SourceVersion)"'
          path: $(Build.CCacheDirectory)
          restoreKeys: '"Ccache" | "$(Agent.OS)" | "${{ parameters.buildType }}"'

      - task: Cache@2
        displayName: ConanModules
        inputs:
          key: '"ConanModules" | "$(Agent.OS)" | "${{ parameters.buildType }}" | $(Build.SourcesDirectory)/CMakeLists.txt | $(Build.SourcesDirectory)/cmake/Conan.cmake'
          path: $(Conan.UserHome)

      - task: Cache@2
        displayName: pip
        inputs:
          key: '"pip" | "$(Agent.OS)" | "${{ parameters.buildType }}" | $(Build.SourcesDirectory)/CMakeLists.txt | $(Build.SourcesDirectory)/cmake/Conan.cmake'
          path: $(pip.CacheDirectory)

      - bash: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install conan
          source ~/.profile
        displayName: Install conan

      - task: CMake@1
        displayName: Create Build Environment
        inputs:
          cmakeArgs: -E make_directory $(Build.CMakeBinariesDirectory)

      - task: CMake@1
        displayName: Configure CMake
        inputs:
          cmakeArgs: -DCMAKE_BUILD_TYPE=${{ parameters.buildType }} -S "$(Build.SourcesDirectory)" -B "$(Build.CMakeBinariesDirectory)"
        env:
          CCACHE_DIR: $(Build.CCacheDirectory)
          CONAN_SYSREQUIRES_MODE: $(Conan.SystemRequiresMode)
          CONAN_USER_HOME: $(Conan.UserHome)
          CONAN_USER_HOME_SHORT: $(Conan.UserHomeShort)

      - task: CMake@1
        displayName: Build
        inputs:
          cmakeArgs: --build . --config ${{ parameters.buildType }} --parallel --verbose
          workingDirectory: $(Build.CMakeBinariesDirectory)
        env:
          CCACHE_DIR: $(Build.CCacheDirectory)

      - bash: ctest -C ${{ parameters.buildType }}
        displayName: Test
        workingDirectory: $(Build.CMakeBinariesDirectory)
